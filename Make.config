# file: Make.config
# Core Library
# $Id: Make.config,v 1.41 2010/11/23 17:58:36 exact Exp $

# OVERVIEW:
# ========
# HINT: search for string "##" to get to next choice to be made
#
# This file defines the platform-dependent
#	information for other makefiles.
# This is the ONLY place during installation
#	where you need to set a value 
# It is used to install the Core Library and subsequently
#	to facilitate compilation of user programs
# There are only 4 variables to set (PLATFORM, LINKAGE, VAR, GMP_PREFIX).
#	For most users, it is sufficient to select PLATFORM,
#	and simply accept the defaults for the other variables.
# Variables:
#	(1) PLATFORM determines the Operating System AND compiler.
#		Default is PLATFORM=gnu
#	(2) LINKAGE picks either a static or a shared library
#		Default is LINKAGE=static
#	(3) VAR determines the VARiant of compiled Core Library
#		Default is VAR="" (empty string)
#	(4) GMP_PREFIX and MPFR_PREFIX -- you only need to set this if
#		you are installing gmp using our Makefile.
#		This determines where gmp and mpfr is installed.
#		Default is GMP_PREFIX= ${CORE_PATH}/gmp.
#		Default is MPFR_PREFIX= ${CORE_PATH}/mpfr.
#		NOTE: the versions of gmp and mpfr are set here, but normally
#		you can keep the default.
# If you want to see the CORE options you have currently selected, just type
#                  > make options
#       in this directory.  Or "make alloptions" for a more comprehensive list.
# For further examples of their usage, look at Makefiles found 
#	under individual directories in ${CORE_PATH}/progs/.
#
# HINT: search for string "##" to get to next choice to be made
#

#===================================================================
# STEP (1) Choose PLATFORM option:
#    The following values for PLATFORM are available:
#
#    1. gnu, uses the GNU gcc/g++ compiler (the default)
#		PLEASE NOTE: that you can choose this option even if
#		your Operating System is a Sun or Linux.
#    2. sun, uses the Sun WorkShop Compiler CC (verison 5.0) on
#		a solaris machine
#    3. cyg, for cygwin under Microsoft Windows.  This is almost the 
#		same as gnu (except you cannot use shared library)
#    4. mac, for MacOS
#    --------
#    5. sgi, uses the SGI MIPSpro Compiler CC (no longer supported)
#
#===================================================================

# Please make your choice the last assignment below!
## First Choice
ifndef PLATFORM
	PLATFORM=sgi
	PLATFORM=mingw
	PLATFORM=sun
	PLATFORM=mac
	PLATFORM=gnu
	PLATFORM=cyg
endif
#===================================================================
# You can stop here if you are willing to accept the default values
# for the other variables.  The default should compile successfully
# in most situations.
#===================================================================
#
#===================================================================
# STEP (2) Choose VARIANT option for compiled library:
#   (which will be placed in ${CORE_PATH}/lib)
#   Variants can be defined for debugging, level2, level3, etc.
#
#   Among the common choices are
#     1. VAR=       -- this creates ${CORE_PATH}/lib/libcore++.a
#                      This is the standard variant. Uses -O2 optimization
#                      Assertions are turned off
#                      (by the compiler -DNDEBUG flag).
#     2. VAR=Debug  -- this creates ${CORE_PATH}/lib/libcore++Debug.a
#                      Please use this options if you need to use debugger,
#                          or if you want "assert()" to be operative.
#                          The executable files will be large because
#                          they have to track extra debugging information.
#     3. VAR=NoOpt  -- this creates ${CORE_PATH}/lib/libcore++NoOpt.a
#                          This turns off optimizations (flag -O0) since
#                          optimization may cause unpredictable behavior
#     4. VAR=Opt    -- this creates ${CORE_PATH}/lib/libcore++Opt.a
#                          Use optimization flag -O3, which use aggressive
#                          inlining of code.  May give bloated executable,
#                          and slower compilation time.
#                          Assertions are turned off
#                      (by the compiler -DNDEBUG flag).
#     5. VAR=DebugBound -- for debugging rootbounds (and Core internals)
#===================================================================

## Second Choice
# Please make your choice of VAR THE last assignment!
# The assignment be overriden by the including makefile (e.g., under progs)

ifndef VAR
	VAR=NoOpt
	VAR=DebugBound
	VAR=
	VAR=Debug
	VAR=Opt
endif

#===================================================================
# STEP (3) Choose Dynamic or Static link library
#   You choose either dynamic or shared library
#       NOTE: if you choose shared library, be sure to update your
#   environment variable LD_LIBRARY_PATH as follows:
#
#  for "csh", 
#
#   setenv LD_LIBRARY_PATH \
#          ${CORE_PATH}/lib:${CORE_PATH}/gmp/lib:${LD_LIBRARY_PATH}.
#
#  for "bash",
#
#   export LD_LIBRARY_PATH= \
#          ${CORE_PATH}/lib:${CORE_PATH}/gmp/lib:${LD_LIBRARY_PATH}.
#
#   If your gmp is not under the ${CORE_PATH}, then modify appropriately.
#===================================================================

## Third Choice
ifndef LINKAGE
	LINKAGE=static
	LINKAGE=shared
endif

# detect extension name for executable files
# and disable to build shared library under cygwin and mingw
OS=$(shell uname)
EXETYPE=

CYGWIN=${findstring CYGWIN, ${OS}}
ifeq (${CYGWIN}, CYGWIN)
  EXETYPE=.exe
  LINKAGE=static
endif

MINGW=${findstring MINGW, ${OS}}
ifeq (${MINGW}, MINGW)
  EXETYPE=.exe
  LINKAGE=static
endif

#===================================================================
# STEP (4) Choose Directory for Installing GMP or MPFR
#	Skip this if you already have gmp and mpfr
# Please make your choice the last assignment!
#===================================================================
## Fourth (last) Choice

ifndef GMP_PREFIX
	GMP_PREFIX=${CORE_PATH}/gmp
endif

ifndef MPFR_PREFIX
	MPFR_PREFIX=${CORE_PATH}/mpfr
endif

# Choose GMP/MPFR.
#   -- Usually, our Core Release makes choices that you can keep:
#   -- these choises are used by the Makefile inside $(COREPATH)/builds:
GMP=gmp-5.0.1
MPFR=mpfr-3.0.1
MPFR=mpfr-3.1.2
SIP=sip-4.3.2


#===================================================================
# STOP HERE: Do not modify the script below.
#
# It will automatically set the compilation/linking flags 
#===================================================================

# Compilation Variable Definition
#
# CXX           -- C++ Compiler
# CC            -- C Compiler (used only when compiling GMP)
# AR            -- Library Archiver
# CXXFLAGS      -- C++ Compiler flags for building test programs
# CORE_CXXFLAGS -- C++ Compiler flags for building Core and Extension Library
# LDFLAGS       -- Linker flags for building test programs
# CORE_LDFLAGS  -- Linker flags for building Core and Extension Library

# TEMP FIX (CHEE: PICFLAG=-fPIC causes warning on cygwin?)
PICFLAG =  

# NOTE: The SGI option has been deprecated since Version 1.4
# (1) SGI compiler
#	-- This has been tested on IRIX (not tested) 
ifeq ($(PLATFORM), sgi)
	  ifndef	CXX
		CXX=CC
	  endif
	  ifndef	CC
		CC=cc
	  endif
	  AR=ar rcs
	
	  CXXFLAGS=-n32 -mips4 -ptused -prelink -w -cckr -O \
	         -LANG:ansi-for-init-scope=on -lm -D$(PLATFORM)

# (2) SUN's compiler
#	-- This has been tested on sun sparcs 
else # first else
  ifeq ($(PLATFORM), sun) # level2 if
	    ifndef	CXX
	  	CXX=CC
	    endif
	    ifndef	CC
	  	CC=cc
	    endif
	    AR=${CXX} -xar -o
	  
	    ifeq (${VAR}, Debug)
	      CXXFLAGS=-g -D$(PLATFORM)
	    else	
	    CXXFLAGS=-O -DNDEBUG -DCORE_DEBUG -D$(PLATFORM)
	    endif
	  
	    ifeq (${VAR}, DebugBound)
	      CXXFLAGS=-g -DCORE_DEBUG_ROOTBOUND -D$(PLATFORM)
	    else	
	      CXXFLAGS=-O -DNDEBUG -DCORE_DEBUG -D$(PLATFORM)
	    endif
	  
	    ifeq (${LINKAGE}, shared)
	      PICFLAG=-KPIC
	      LDFLAGS=
	      CORE_CXXFLAGS=${CXXFLAGS} ${PICFLAG}
	      CORE_LDFLAGS=-G
	    else
	      LDFLAGS=-Bstatic
	      CORE_CXXFLAGS=${CXXFLAGS}
	      CORE_LDFLAGS=
	    endif
  
# (3) MacOS platform
#
  else # second else
    ifeq ($(PLATFORM), mac) # level3 if
	    EXTRA_CXXFLAG= 
	    ifndef	CXX
	  	CXX=g++
	    endif
	    ifndef	CC
	  	CC=gcc
	    endif
	    AR=ar rcs
	  
	    ifeq (${VAR}, Debug)
	      CXXFLAGS=-g -Wall -D$(PLATFORM) ${EXTRA_CXXFLAG}
	    else
	      CXXFLAGS=-O2 -Wall -DNDEBUG -DCORE_DEBUG -D$(PLATFORM) ${EXTRA_CXXFLAG}
	    endif
	  
	    ifeq (${VAR}, DebugBound)
	      CXXFLAGS=-g -DCORE_DEBUG_ROOTBOUND -D$(PLATFORM) ${EXTRA_CXXFLAG}
	    endif
	  
	    ifeq (${VAR}, Opt)
	      CXXFLAGS=-O3 -Wall -DNDEBUG -D$(PLATFORM) ${EXTRA_CXXFLAG}
	    endif
	  
	    ifeq (${VAR}, NoOpt)
	      CXXFLAGS=-Wall -O0 -DNDEBUG -DCORE_DISABLE_MEMORY_POOL -D$(PLATFORM) ${EXTRA_CXXFLAG}
	    endif
	  
	    ifeq (${LINKAGE}, shared)
	      PICFLAG=-fPIC
	      LDFLAGS=
	      CORE_CXXFLAGS=${CXXFLAGS} ${PICFLAG} 
	      CORE_LDFLAGS=-shared
	    else
	      LDFLAGS=-static
	      LDFLAGS=
	      CORE_CXXFLAGS=${CXXFLAGS}
	      CORE_LDFLAGS=
	    endif

# (4) GNU's g++ compiler (the default)
#	-- this covers both PLATFORM=gnu and PLATFORM=cyg	
#	-- This has been tested on Linux and Sun Sparc
#
    else # third else
	    ifndef	CXX
	  	CXX=g++
	    endif
	    ifndef	CC
	  	CC=gcc
	    endif
	    AR=ar rcs
	  
	    ifeq (${VAR}, Debug)
	      CXXFLAGS=-g -Wall -D$(PLATFORM)
	    else
	      CXXFLAGS=-O2 -Wall -DNDEBUG -DCORE_DEBUG -D$(PLATFORM)
	    endif
	  
	    ifeq (${VAR}, DebugBound)
	      CXXFLAGS=-g -DCORE_DEBUG_ROOTBOUND -D$(PLATFORM)
	    endif
	  
	    ifeq (${VAR}, Opt)
	      CXXFLAGS=-O3 -Wall -DNDEBUG -D$(PLATFORM)
	    endif
	  
	    ifeq (${VAR}, NoOpt)
	      CXXFLAGS=-Wall -O0 -DNDEBUG -DCORE_DISABLE_MEMORY_POOL -D$(PLATFORM)
	    endif
	  
	    ifeq (${LINKAGE}, shared)
	      PICFLAG=-fPIC
	      LDFLAGS=
	      CORE_CXXFLAGS=${CXXFLAGS} ${PICFLAG} 
	      CORE_LDFLAGS=-shared
	    else
	      LDFLAGS=-static
	      LDFLAGS=
	      CORE_CXXFLAGS=${CXXFLAGS}
	      CORE_LDFLAGS=
	    endif
    endif # level3
  endif # level2
endif # level1

ifeq ($(PLATFORM), mac)
# (4) MacOS -- this takes the defaults of cyg (below), but
# uses gcc-4.2 by default as it is a more modern compiler.
	CXX=g++-mp-4.4
	CXX=g++
	CC=gcc
	CXX=g++
endif

# NOTE(chee):
# Would like to stop compiling on first error:

# REMARK: you may want to comment out this line -- it seems that -Wfatal-errors
# 	gave error for "make corelib" for Surin Ahn (Feb 2013).
CXXFLAGS := -std=c++11 -Wfatal-errors ${CXXFLAGS}
 
# NOTE(narayan):
# Determines the right extension to use for shared libraries.
# .so is strictly fine on mac, but since we use the Mach-O
# system, and consequently the "-dynamiclib" option for GCC
# it is better to be explicit in our filename.
CORE_DYLIB_EXTENSION=so
ifeq (${PLATFORM}, mac)
  CORE_DYLIB_EXTENSION=dylib
endif

#===================================================================
# END
#===================================================================
