File: README for gaussion

	Since Core 1.2.
	CORE Library: $Id: README,v 1.3 2010/05/19 14:15:37 exact Exp $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

These programs implement the straightforward Gaussian elimination
algorithm, with and without pivoting.  The main point of the example is
to illustrate the differences in running these programs
in Core Levels 1, 2, and 3.

To test the programs, type

	% make test		// compiles the programs gaussian.cpp
				// and pivotgaussianT.cpp into all three levels,
				// and runs them on sample inputs.
	% make moretest

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
REMARKS:
	MatHilbert6 is the 6x6 Hilbert matrix.
	The determinant of a nxn Hilbert matrix is Theta of 2^{-2n^2}.
	In level 1, the answer is NaN (probably underflow).
	
	MatZero4 is a 4x4 matrix whose determinant is 0.
	In level 1, the answer is 2.9976e-15.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FILES:
	gaussian.ccp:		Uses simple (non-pivoting) Gaussian
				elimination to compute the determinant.
	gaussianX.ccp:		A version that has the input matrix hardcoded.

	pivotgaussian.cpp:	A pivoting version of Gaussian elimination

	pivotgaussianT.cpp:	A pivoting version of Gaussian elimination using
				Core's templated linearAlgebraT.h library

DIRECTORIES:
	inputs: 	Subdirectory with sample matrices.
			See the README file there for details.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Since Core 2.0, we have the ability to compile them
in all three levels of accuracy.

--Chee (May 2010)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
