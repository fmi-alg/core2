file: README CORE/progs/hyperGeom
Since Core Library Version 1.4

$Id: README,v 1.3 2010/03/30 12:44:50 exact Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
WARNING: In Core2, this implementation of hypergeometric functions
	seems to be partially broken.  For instance, when we compute 
		sin(0.01), sin(0.41), sin(0.81), sin(1.21)
	to 100 digits, we find that the first result was completely wrong,
	but the remainting three are still correct (checked against MAPLE).
	So sin(x) where x is small does not work.

	There are other problems like arccos() and arcsin() becoming very slow
	for higher output digits. e.g.) when the output digits is 91.
	it is not terminating. But it seems ok at 90 (strange).
	Also exp() does not terminate at all for any value.

	-- Jihun (Feb 2010)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
Synopsis:
	Facility to compute hypergeometric functions to any desired accuracy.

	Function registeration facility for important elementary functions:
		ln(x), exp(x), 
		sin(x), cos(x), tan(x), cot(x)
		arcsin(x), arccos(x), arctan(x)
		erf(x)

	BUGS:
	(1) Some hypergeometric functions require constants like Pi and ln(2).
		We currently assume these constants are kept in a file named
		pi.big and log2.big in the current directory.
	        If you need more bits than the precomputed values of
		Pi and Log2 (about 10,000 digits), we get an error.  We should
		just let the system compute the necessary number of digits.
	(2) Stack overflows can occur at high accuracy.  Please read
		"stackOverflow.txt" under $(CORE_PATH)/doc for information.
	(3) Currently, we do not implement methods to exploit
		alternative series.  This should speed things up.

Files:
	demo.cpp -- computing any elementary function at any precision, 
                    and can output a Maple program for verification
	demoPi.cpp -- yet another way to compute Pi
	verify.cpp -- demonstrate argument reduction
	constant/   -- demonstrate reading/writing mathematical constants
	timing/  -- timing tests
	output/  -- output directory for demo program
	
History:
	Aug, 2001: Originally designed by
		Maria Eleftheriou, <mariae@us.ibm.com>
		Jose Moreira, <jmoreira@us.ibm.com>
		IBM T.J. Watson Research Center
	May, 2002: Improvements and additional contributions
		(preprocessing of hypergeometric arguments,
		file input of arbitrary precision constants,
		improved automatic error analysis)
		Chee Yap <yap@cs.nyu.edu>
		Zilin Du <zilin@cs.nyu.edu>
        June, 2002: Implemented argument reductions
		Implemented automatic parameter preprocessing 
		Implemented automatic error analysis 




