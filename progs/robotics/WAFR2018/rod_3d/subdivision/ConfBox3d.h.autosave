#pragma once

#include <assert.h>
#include <iostream>
#include <vector>

#include "geometry/corner.h"
#include "geometry/edge.h"
#include "geometry/wall.h"
#include "predicate/ConfBox3dPredicate.h"
#include "subdivision/Box3d.h"
#include "subdivision/Rot3dSide.h"
#include "subdivision/Status.h"

class ConfBox3d;
class Set;
class ConfBox3dPredicate;

class ConfBox3d {
 private:
  Box3d* box_ = NULL;
  Rot3dSide* rot_ = NULL;

 public:
  Point3d mB;
  Point3d rot_mB;
  Segment3d rod;

  double width;
  double rot_width;

  int depth;
  static double l0;
  double rB;
  static int box_id_counter;
  int box_id;

  static ConfBox3dPredicate* predicate;

  std::vector<ConfBox3d*> children;
  std::vector<ConfBox3d*> neighbors;
  ConfBox3d* parent;

  Status status;

  Set* pSet;

  std::vector<Corner*> corners;
  std::vector<Edge*> edges;
  std::vector<Wall*> walls;
  std::vector<Sphere*> spheres;

  std::vector<Corner*> vor_corners;
  std::vector<Edge*> vor_edges;
  std::vector<Wall*> vor_walls;

  Corner* nearest_corner;
  Edge* nearest_edge;
  Wall* nearest_wall;

  static std::vector<ConfBox3d*> boxes;

  bool is_in_source;
  int heap_id;
  ConfBox3d* prev;
  bool visited;
  bool in_queue;
  bool in_vor_queue;

  int bidirection;

  // for generate path
  bool in_source;
  double dist_Dijkstra;

  ConfBox3d(Point3d pp, double w);
  ConfBox3d(Point3d pp, double ww, Point3d rot_pp, double rot_ww);

  bool isLeaf();

  bool getRot(float rot[3]);

  ConfBox3d* getBox(Point3d pp, Point3d rot_pp);
  ConfBox3d* getNeighborBox(ConfBox3d* neighbor);

  void addCorner(Corner* c);

  void addEdge(Edge* e);

  void addWall(Wall* w);

  void addSphere(Sphere* s);

  bool isFree();

  Status getStatus();

  std::vector<ConfBox3d*> getChildren();

  std::vector<ConfBox3d*> getNeighbors();

  bool isNeighbor(ConfBox3d* other);
  bool isAdjacent(ConfBox3d* other);

  bool split(double epsilon);

  bool contains(ConfBox3d* other);
  bool rotIsOverlapped(ConfBox3d* other);

  static ConfBox3d* makePointBox(Point3d pp, Point3d rot_pp);
};
