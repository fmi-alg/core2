README File for "ball" demo

This project (completed September 2013)
was originally undertaken by Surin Ahn for
the 2013 Siemens Math, Science, Technology Competition.

Surin Ahn was a Regional Finalist (one out of 100 students nationwide),
from Mamoroneck Union Free School District, New York.

--Chee Yap (Apr 2014)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TODO:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
(1) Some motion is too fast.  Users should be able to adjust the animation speed.
(2) We want the ball to move more smoothly.
	Suppose you first compute a number (F) of frames (using the user
	choice for speeding up the demo).  Faster speed corresponds to smaller F.
	Sum up the length of all the line segments in a path.
	Call this total length L.  Intuitively, you would like
	to show a frame for every L/F distance.
	If a segment has length s, then you display  1+ floor(sF/L) frames
	for that segment.
(3) Default viewpoint of the demo.
	For each demo, we want be specify (using the Makefile)
	the most useful initial viewing point.
	In the GLU library, there is a function called
		gluLookAt(eyeX, eyeY, eyeZ, atX, atY, atZ, upX, upY, upZ)
	specify the "eye" position, "look-at" position, and a direction for "UP".
	So we want to add to the following last line to your call:

	./ball $(interactive) \
	        $(startX) $(startY) $(startZ)  $(goalX) $(goalY) $(goalZ) \
		$(epsilon) $(radius) $(fileName) \
		$(boxWidth) $(windowPosX) $(windowPosY) \
		$(Qtype) $(seed)  $(inputDir) \
		$(xtrans) $(ytrans) $(ztrans) $(scale) \
		$(eyeX) $(eyeY) $(eyeZ) $(atX) $(atY) $(atZ) $(upX) $(upY) $(upZ) \
		&
(4) Features:
	Reset: We should be able to reset the viewing position to the original,
		See the latest 2-links example for many of such features.
	Axes: the origin and the x/y/z axes should be drawn
		(helps us understand construction of obstacles)
	Constrained Rotation: it is unlikely we need to see the motion from
		below the obstacles.  Restrict the ability to completely
		rotate the viewpoint (make it roughly 2.5 degrees of freedom)
(5) Input format:
	Rectangles or parallellograms are very useful for constructing environments:
		we should allow the input of 3 points to
		generate the fourth point when desired.
(6) Generate more complex scenes:
	need some tools for this
(7) Transparencies:
	the obstacles should allow some transparency so we can see obscured ball motion.
(8) Multiple views:  should be able to set up two simultaneous views
	(e.g., top view and side view)
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
