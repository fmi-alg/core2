# FORMAT for input of polyhedral environment:
#
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
# GEOMETRY:
# 	We assume all faces are triangular.
# 	It does not seem easy to generalize to convex polygonal faces
# 	since any face with more than 3 vertices are unlikely to be
# 	coplanar except for very special numbers.  However, there
# 	is a useful case where we can ensure coplanarity: that is
# 	a parallellogram generated by 3 vertices.  Moreover,
# 	we could generalize this to arbitrarily many vertices.
#
# 	A polyhedron is a set of faces with disjoint interiors
# 	such that every edge is shared by exactly two faces.
#
# 	We use the Right Hand Convention for Inside/Outside of polyhedra:
# 	the vertices of each face appear counterclockiwse when seen
# 	from the outside.   Using the righthand rule,
# 	the thumb points in the outward normal when the other fingers
# 	are wrapped in counterclockwise direction.
#
# PREPROCESSING:
# 	Comment character is "#" and continuation character is "\".
# 	The rest of an input line is ignored after "#" or "\".
# 	While "#" terminates the current line, "\" joins the current line
# 		to the next line.
# 	White spaces at the start of a line or trailing a line are ignored,
# 		as are empty lines.
# 	Contiguous white spaces can be replaced by a single space
# 	After all this processing, our file is a sequence of non-empty
# 	lines, with no extraneous characters.
#
#	We then break these lines into SECTIONS.
# 	There are two types of sections: Points or Polyhedrons.
# 	These can be intermixed although the first section must be Points
# 	because Polyhedron must refer to previousely defined points.
# 	The termination of input file is marked by a line containing one word, "End".
#
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
# BASIC SYNTAX:
# 	The basic syntax has 3 sections: Constants, Points and Polyhedrons
# 	Note that [...] marks an optional part of the syntax
# 		E.g., Poly[hedron] means that we can write Poly or Polyhedron.
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
#    #######################
#    # Constant Section
#    #######################
#    Constants		# Each constant must be given a name
#    Pi      3.14159
#    height  100
#    width   30
#    #######################
#    # Point Section
#    #######################
#    Points [N]    	# Beginning of a Points Section
#    			#   with points numbered N, N+1, N+2, etc.
#    			# If the optional N is omitted, then assume N=1
#
#    x1 y1 z1	# vertex N where x1,y1,z1 are decimal numbers or constants, one per line
#    x2 y2 z2	# vertex N+1
#    ...
#    xM yM zM   # vertex N+M. 
#
#    #######################
#    # Polyhedron Section
#    #######################
#    Poly[hedron] ["name"] 	# The identifer "Poly" or "Polyhedron"
#    				# followed by an optional name for the
#    				# polyhedron.  The rest of the section is a list
#				# triangular faces.
#
#    u11 v11 w11        # first triangle (face)   given by 3 vertex indices
#    u12 v12 w12        # second triangle (face)
#    ...
#    u1F1 v1F1 w1F1     # last triangle (face)
#
#    #######################
#    # Put Statements
#    			# We can either put points or polyhedrons.
#    #######################
#    PutPoly name-of-poly + vector	# vector can be "x y z" or named points
#    PutPoint name-of-point + radius 	# conceptually, this is a sphere 
#    			# REMARK: This construction allows us to put many copies of
#    			# an object (with different translational vectors)
#    			# When we define a polyhedron, we are implicitly
#    			# putting a copy of it into the scene.
#    			# But the points we define are not automatically put
#    			# into the scene.
#
#    #######################
#    # Termination
#    #######################
#    End          	# Marks the end of input file.
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
# EXTENDED SYNTAX:
# 	The extended syntax allows named vertices and basic
# 	point operations.  We use a python program (input_interpreter.py)
# 	to convert the extended syntax into the basic syntax.
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
# (1) Named vertices:
# 	To specify a named vertex, we write (say),
#
#	   "origin" -3.1 4 159 	   # "origin" (in quotes) names point (-3.1,4,159)
#	   "corner" 1 2 3 	   # "corner" is the name of (1,y2,z2)
#
#	I.e., the first token in the line should be a quoted string, which
#	is unique and begins with a letter.  E.g., "origin", "A", "A1",
#	"A2", etc.
#
#	To use a named point in a face, we just use its name (without quotes):
#
#	   2 origin 5 	   # triangle which uses "origin" (without quotes)
#	   			   #    and the vertex 2 and 5
#	   			   # NOTE: v1, v3 are integers
#	   origin 3 corner	   # triangle (origin, vertex 3, corner)
#
# (2) Vector Addition and Subtraction
#
#	We can also add or subtract two or more points (named or unnamed):
#
#	   1 3 0 - 2 2 2	   # Point (-1, 1, -2)
#	   1 3 0 - 2 2 2 + 1 0 0   # Point (0, 1, -2)
#	   origin + x y z	   # Point origin+(x,y,z)
#	   corner - origin	   # This produces the point corner-origin
#	   x y z + origin	   # Point origin+(x,y,z)
#
#	We could also name the result of such operations
#
#	   "Offset" corner - origin #  "Offset" is the point corner-orgin
#	   "B" x y z - origin	   # B is the point origin-(x,y,z)
#
# (2) Parallelogram faces:
# 	Four or more general points tend to be non-coplanar.
# 	We propose a method to specify four points forming a planar parallelogram.
# 	In place of a triangular face, we can write:
#
# 	c u v w 		   # where c is either 0 or 1
# 				   # and u, v, w are either names of points
# 				   # or their implicit index (1,2,.., N).
# 				   ##########################################
# 				   # 0 tells us that this is just a triangle
# 				   # and 1 tells us that this is a
# 				   # quadrilateral where the fourth point is w+u-v.
# 				   # IMPORTANT CONVENTION: (u,v,w,w+u-v) forms a
# 				   # parallelogram listed counterclockwise.
# 				   ##########################################
# 	c u v w + x y z		   # Here, c is either 0 or 1 as before, with
# 				   # the same interpretation, and x y z
# 				   # specifies the offset for each point of the
# 				   # triangle or quadrilateral.  The "+" can
# 				   # also be a "-".
# 	E.g.,
# 	1 v1 origin v3 	   	   # this is a quadrilateral
# 	0 v1 origin v3 - 1 0 1	   # this is the triangle (v1, origin, v3)
# 				   # translated by -(1, 0, 1)
# (3) Further extensions to polygons with 4 or more points:
# 	2 u1 u2 ... uk		   # for a polygon with k vertices
# 				   # CONVENTION: we want the vertices to be
# 				   # listed in a counter clockwise order
# 				   # --this will generates k-2 triangles
# 				   # (u1, u2, u3),
# 				   # (u1, u3, u4),
# 				   # ...
# 				   # (u1, u{k-1}, uk)
# 				   # NOTE: by our convention, these triangles
# 				   #   are given in counter clockwise order.
# 				   # WARNING: if the polygon is convex, then
# 				   #    the resulting triangles will not be
# 				   #    overlapping.  But designer beware in
# 				   #    case of non-convex polygons.
# 				   # E.g., if you want a square face with a
# 				   #   square hole, you can use two such non-convex
# 				   #   polygons to define the face (and choose
# 				   #   the first vertex properly!)
# 				   #
# 	2 u1 u2 ... uk + x y z	   # This is a variant of the previous case except
# 				   # that we also have an offset of (x,y,z)
# 				   # (or "-" instead of "+")
# 	3 "nameOfPoly" + x y z	   # This is just the translation of the named
# 				   # polyhedron.
# (4) Thick polygons
# 	4 u v w [+ x y z]	   # this is the thick version of "0 u v w [+ x y z]"
# 	5 u v w [+ x y z] 	   # this is the thick version of "1 u v w [+ x y z]"
# 	6 u1 u2 ... uk [+ x y z]   # the thick version of "2 u1 u2 ... uk [+ x y z]"
# 			
# 				   # By the "thick version" of a polyhedra, we
# 				   # mean that every triangle is duplicated and
# 				   # given the opposite orientation.
# (5) Put Box			# Just make this a generalization of thick polygons?
# 	PutBox x y z + a b c	# a box with (x,y,z) and (x,y,z)+(a,b,c)
# 				# as diagonally opposite corners 
# 	PutBox x y z : a b c	# a box with (x,y,z) and (a,b,c)
# 				# as diagonally opposite corners 
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
# -- Chee Yap & Ziyao Wei (2013-2014)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
